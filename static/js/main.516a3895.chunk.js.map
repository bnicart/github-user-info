{"version":3,"sources":["GithubUserInfo.js","App.js","serviceWorker.js","index.js"],"names":["GithubUserInfo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","GITHUB_BASE_USER_API_URL","state","login","avatar_url","name","joined_date","bio","location","public_repos","followers","handleSearch","bind","assertThisInitialized","initializeUserInfo","_this2","setState","fetchApi","concat","then","data","objectSpread","Date","created_at","toDateString","value","url","fetch","response","json","_this$state","message","card","react_default","a","createElement","className","src","alt","href","html_url","target","rel","noUserFound","GithubUserInfo_UserSearch","React","Component","UserSearch","_this3","handleChange","handleSubmit","event","e","preventDefault","onSubmit","htmlFor","data-search","type","onChange","id","placeholder","App","GithubUserInfo_GithubUserInfo","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.516a3895.chunk.js","sourcesContent":["import React from 'react';\nimport './GithubUserInfo.css';\n\nexport default class GithubUserInfo extends React.Component {\n\n  GITHUB_BASE_USER_API_URL = 'https://api.github.com/users';\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: '',\n      avatar_url: '',\n      name: '',\n      joined_date: '',\n      bio: '',\n      location: '',\n      public_repos: 0,\n      followers: 0\n    }\n\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeUserInfo(this.state.login);\n  }\n\n  initializeUserInfo(login) {\n    this.setState({login: ''});\n    if (!login) return;\n    this.fetchApi(`${this.GITHUB_BASE_USER_API_URL}/${login}`).then(data => {\n      this.setState({...data});\n      this.setState({joined_date: (new Date(data.created_at)).toDateString()});\n    });\n  }\n\n  handleSearch(value) {\n    this.initializeUserInfo(value);\n  }\n\n  fetchApi(url) {\n    return fetch(url).then(response => response.json());\n  }\n\n  render() {\n    let {login, message} = this.state;\n\n    let card =\n      <div className=\"card mb-3 p-2\">\n        <div className=\"row no-gutters\">\n          <div className=\"col-md-4\">\n            <div className=\"inline\">\n              <img src={this.state.avatar_url} className=\"card-img\" alt=\"Github Avatar\" />\n            </div>\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h4 className=\"card-title\">\n                { this.state.name }\n                <div>\n                  <small>\n                    (\n                      <a href={this.state.html_url} target=\"_blank\" rel=\"noopener noreferrer\">{ this.state.login }</a>\n                    )\n                  </small>\n                </div>\n              </h4>\n              <div className=\"card-text text-left\">\n                <span className=\"font-weight-bold\">Joined date:</span>\n                <span> { this.state.joined_date } </span>\n              </div>\n              <div className=\"card-text text-left\">\n                <span className=\"font-weight-bold\">Bio:</span>\n                <span> { this.state.bio } </span>\n              </div>\n              <div className=\"card-text text-left\">\n                <span className=\"font-weight-bold\">Location:</span>\n                <span> { this.state.location } </span>\n              </div>\n              <div className=\"card-text text-left\">\n                <span className=\"font-weight-bold\">Public repositories:</span>\n                <span> { this.state.public_repos } </span>\n              </div>\n              <div className=\"card-text text-left\">\n                <span className=\"font-weight-bold\">Followers:</span>\n                <span> { this.state.followers } </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    let noUserFound =\n      <div>\n        <h3 className=\"center\">No user found...</h3>\n      </div>\n    return (\n      <div className=\"container-flex text-monospace\">\n        <div className=\"row whole-page-height\">\n          <div className=\"col\"></div>\n          <div className=\"col align-self-center\">\n            <UserSearch handleSearch={this.handleSearch} />\n            {\n              login ? card : (message === 'Not Found' ? noUserFound : null)\n            }\n          </div>\n          <div className=\"col\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass UserSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value || ''});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.handleSearch(this.state.value);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"form-group mx-auto\">\n          <label htmlFor=\"search\" className=\"sr-only\">Search</label>\n        <input data-search=\"search\" type=\"text\" className=\"form-control search-field\" value={this.state.value} onChange={this.handleChange} name=\"search\" id=\"search\" placeholder=\"Search github user...\" />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary invisible\">\n          Search\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport GithubUserInfo from './GithubUserInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GithubUserInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}